app:
  database-access-type: jpa
  use-queue: true
  link-age: 120
  link-update-batch-size: 50
  link-updater-scheduler:
    enable: true
    interval: 10000
    force-check-delay: 10000
  github-client:
    api: https://api.github.com
    retry:
      strategy: exponential
      max-attempts: 3
      backoff: 2000
      max-backoff: 10000
      codes: 503, 504
  stackoverflow-client:
    api: https://api.stackexchange.com/2.3
    retry:
      strategy: linear
      max-attempts: 3
      backoff: 2000
      max-backoff: 10000
      codes: 503, 504
  bot-client:
    api: http://localhost:8090
    retry:
      strategy: fixed
      max-attempts: 3
      backoff: 2000
      codes: 429, 503, 504
  link-sources:
    github:
      domain: github.com
      handlers:
        repository:
          regex: /(?<owner>[\w-\.]+)/(?<repo>[\w-\.]+)
          handler: edu.java.handler.github.Repository
        branch:
          regex: /(?<owner>[\w-\.]+)/(?<repo>[\w-\.]+)/tree/(?<branch>[\w-\./]+)
          handler: edu.java.handler.github.RepositoryBranch
        pull-request:
          regex: /(?<owner>[\w-\.]+)/(?<repo>[\w-\.]+)/pull/(?<num>\d+)
          handler: edu.java.handler.github.PullRequest
        issue:
          regex: /(?<owner>[\w-\.]+)/(?<repo>[\w-\.]+)/issues/(?<num>\d+)
          handler: edu.java.handler.github.Issue
    stackoverflow:
      domain: stackoverflow.com
      handlers:
        question:
          regex: /(?:questions|q)/(?<id>[\d]+)[/\w-\d]*
          handler: edu.java.handler.stackoverflow.Question
  kafka-topics:
    link-update:
      name: link-update
      partitions: 1
      replicas: 3

spring:
  application:
    name: scrapper
  messages:
    basename: messages
    encoding: UTF-8
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: true
        format_sql: false
  liquibase:
    enabled: false
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
  kafka:
    bootstrap-servers: localhost:29091,localhost:29092,localhost:29093
    producer:
      client-id: ${spring.application.name}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
      batch-size: 100000
      properties:
        linger.ms: 10000
        delivery.timeout.ms: 60000

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui
    disable-swagger-default-url: true
    tags-sorter: alpha
    operations-sorter: method
  default-produces-media-type: application/json
  default-consumes-media-type: application/json

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: (/tg-chat.*)|(/links.*)
      http-response-body: "{\"description\":\"429 TOO_MANY_REQUESTS\",\"code\":\"RATE_LIMIT\",\"exceptionName\":\"ApiException\",\"exceptionMessage\":\"Too Many Requests\",\"stacktrace\":[]}"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 2
              time: 1
              unit: seconds
